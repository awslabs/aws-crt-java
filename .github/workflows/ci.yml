name: CI

on:
  push:
    branches:
      - '*'
      - '!main'

env:
  BUILDER_VERSION: v0.9.4
  BUILDER_SOURCE: releases
  BUILDER_HOST: https://d19elf31gohf1l.cloudfront.net
  PACKAGE_NAME: aws-crt-java
  LINUX_BASE_IMAGE: ubuntu-18-x64
  RUN: ${{ github.run_id }}-${{ github.run_number }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
  AWS_REGION: us-east-1

jobs:
  linux-compat:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        image:
          - manylinux2014-x64
          - al2-x64
          - fedora-34-x64
          - opensuse-leap
          - rhel8-x64
          #- manylinux2014-x86 until we find 32-bit linux binaries we can use
    steps:
    - name: Checkout Sources
      uses: actions/checkout@v2
      with:
        submodules: true
    - name: Build ${{ env.PACKAGE_NAME }}
      run: |
        aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh
        ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ matrix.image }} build -p ${{ env.PACKAGE_NAME }}
    - uses: actions/upload-artifact@v2
      if: failure()
      with:
        name: logs
        path: |
          hs_err_pid*
          target/surefire-reports/*stream

  linux-compiler-compat:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        compiler:
          - clang-3
          - clang-6
          - clang-8
          - clang-9
          - clang-10
          - clang-11
          - gcc-4.8
          - gcc-5
          - gcc-6
          - gcc-7
          - gcc-8
    steps:
    - name: Checkout Sources
      uses: actions/checkout@v2
      with:
        submodules: true
    - name: Build ${{ env.PACKAGE_NAME }}
      run: |
        aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh
        ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --compiler=${{ matrix.compiler }}
    - uses: actions/upload-artifact@v2
      if: failure()
      with:
        name: logs
        path: |
          hs_err_pid*
          target/surefire-reports/*stream

  linux-arm:
    name: ARM (${{ matrix.arch }})
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [armv6, armv7, arm64]
    steps:
    - name: Build ${{ env.PACKAGE_NAME }}
      run: |
        python3 -c "from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }}/${{ env.BUILDER_SOURCE }}/${{ env.BUILDER_VERSION }}/builder.pyz?run=${{ env.RUN }}', 'builder')"
        chmod a+x builder
        ./builder build -p ${{ env.PACKAGE_NAME }} --target=linux-${{ matrix.arch }} --spec=downstream

  windows:
    runs-on: windows-latest
    steps:
    - name: Checkout Sources
      uses: actions/checkout@v2
      with:
        submodules: true
    - name: Build ${{ env.PACKAGE_NAME }} + consumers
      run: |
        python -c "from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }}/${{ env.BUILDER_SOURCE }}/${{ env.BUILDER_VERSION }}/builder.pyz?run=${{ env.RUN }}', 'builder.pyz')"
        python builder.pyz build -p ${{ env.PACKAGE_NAME }} --spec=downstream

  windows-vc14:
    runs-on: windows-latest
    strategy:
      matrix:
        arch: [x86, x64]
    steps:
    - name: Checkout Sources
      uses: actions/checkout@v2
      with:
        submodules: true
    - name: Build ${{ env.PACKAGE_NAME }} + consumers
      env:
        AWS_CMAKE_TOOLSET: v140
      run: |
        python -c "from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }}/${{ env.BUILDER_SOURCE }}/${{ env.BUILDER_VERSION }}/builder.pyz?run=${{ env.RUN }}', 'builder.pyz')"
        python builder.pyz build -p ${{ env.PACKAGE_NAME }} downstream

  osx:
    runs-on: macos-latest
    steps:
    - name: Checkout Sources
      uses: actions/checkout@v2
      with:
        submodules: true
    - name: Build ${{ env.PACKAGE_NAME }} + consumers
      run: |
        python3 -c "from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }}/${{ env.BUILDER_SOURCE }}/${{ env.BUILDER_VERSION }}/builder.pyz?run=${{ env.RUN }}', 'builder')"
        chmod a+x builder
        ./builder build -p ${{ env.PACKAGE_NAME }} --spec=downstream

  android:
    name: Android
    # ubuntu-20.04 comes with Android tooling, see: https://github.com/actions/virtual-environments/blob/main/images/linux/Ubuntu2004-README.md#android
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout Sources
        uses: actions/checkout@v2
        with:
          submodules: true
      - name: Build ${{ env.PACKAGE_NAME }}
        run: |
          ./gradlew :android:crt:build

  check-submodules:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Source
      uses: actions/checkout@v2
      with:
        submodules: true
        fetch-depth: 0
    - name: Check Submodules
      # note: using "@main" because "@${{env.BUILDER_VERSION}}" doesn't work
      # https://github.com/actions/runner/issues/480
      uses: awslabs/aws-crt-builder/.github/actions/check-submodules@main
