/*
 * This file was generated by the Gradle 'init' task.
 */

plugins {
    id 'c'
    id 'java-library'
    id 'maven-publish'
}

repositories {
    mavenLocal()
    maven {
        url = uri('http://repo.maven.apache.org/maven2')
    }
}

dependencies {
    testImplementation 'junit:junit:4.12'
}

group = 'software.amazon.awssdk.crt'
version = '1.0.0-SNAPSHOT'
description = 'software.amazon.awssdk.crt:aws-crt'
sourceCompatibility = '1.8'

def libcryptoPath = null

model {
    buildTypes {
        debug
        release
    }
    platforms {
        x64 {
            architecture "x64"
        }
        x86 {
            architecture "x86"
        }
        aarch64 {
            architecture "aarch64"
        }
        armv6 {
            architecture "armv6"
        }
        armv7 {
            architecture "armv7"
        }
    }
    components {
        crt(SharedLibraryBinarySpec)
    }
}


def buildType = 'RelWithDebInfo'
if (project.hasProperty('buildType')) {
    buildType = project.property('buildType').toString()
    println("Using custom build type: ${buildType}")
}

task cmakeConfigure {
    def cmakeArgs = [
        "-B${buildDir}/cmake-build",
        "-H${projectDir}",
        "-DCMAKE_BUILD_TYPE=${buildType}",
        "-DCMAKE_INSTALL_PREFIX=${buildDir}/cmake-build",
        "-DCMAKE_EXPORT_COMPILE_COMMANDS=ON",
        "-DBUILD_DEPS=ON",
        "-DBUILD_TESTING=OFF",
    ]

    if (org.gradle.internal.os.OperatingSystem.current().isLinux() ||
        org.gradle.internal.os.OperatingSystem.current().isFreeBSD()) {
        libcryptoPath = '/opt/openssl'
        // To set this, add -PlibcryptoPath=/path/to/openssl/home on the command line
        if (project.hasProperty('libcryptoPath')) {
            libcryptoPath = project.property('libcryptoPath').toString()
            println("Using project libcrypto path: ${libcryptoPath}")
        }
    }

    if (libcryptoPath) {
        cmakeArgs += [
            "-DLibCrypto_INCLUDE_DIR=${libcryptoPath}/include",
            "-DLibCrypto_STATIC_LIBRARY=${libcryptoPath}/lib/libcrypto.a",
        ]
    }

    inputs.file('CMakeLists.txt')
    outputs.file("${buildDir}/cmake-build/CMakeCache.txt")

    doLast {
        println("cmake ${cmakeArgs.join(' ')}")
        exec {
            executable 'cmake'
            args cmakeArgs
        }
    }
}

task cmakeBuild {
    dependsOn cmakeConfigure
    inputs.file("${buildDir}/cmake-build/CMakeCache.txt")
    inputs.files(fileTree(dir: 'src/native', includes: ['**/*.c', '**/*.h']))
    inputs.files(fileTree(dir: 'aws-common-runtime', includes: ['**/CMakeLists.txt', '**/*.c', '**/*.h']))
    outputs.file("${buildDir}/cmake-build/lib/libaws-crt-jni.so")

    def cmakeArgs = [
        "--build", "${buildDir}/cmake-build",
        "--target", "all",
    ]

    doLast {
        println("cmake ${cmakeArgs.join(' ')}")
        exec {
            executable 'cmake'
            args cmakeArgs
        }
    }
}

compileJava.dependsOn cmakeBuild

tasks.register('testsJar', Jar) {
    archiveClassifier = 'tests'
    from(sourceSets.test.output)
}

publishing {
    publications {
        maven(MavenPublication) {
            from(components.java)
            artifact(testsJar)
        }
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}
